#include <iostream>
#include <vector>
#include <utility>
#include <set>
#include <iterator>
#include <climits>
using namespace std;

long long distance(vector<vector<int> > &adj, int *cost[], int s, int t, int n) {
  int dist[n];
  int prev[n];
  for(int i=0;i<n;i++){
  	dist[i] = INT_MAX;
  	prev[i] = -1;
  }
  dist[s] = 0;
  set<pair<int,int>> q;
  q.insert(make_pair(0,s));

  while(!q.empty()){
  	pair<int,int> p = *(q.begin());
  	int u = p.second;
  	q.erase(q.begin());
  	for(vector<int>::iterator it=adj[u].begin();it!=adj[u].end();++it){
  		int v = *it;
  		if(dist[v]>dist[u]+cost[u][v]){
  			dist[v] = dist[u] + cost[u][v];
  			prev[v] = u;
  			q.insert(make_pair(dist[v],v));
  		}
  	}
  }
  if(dist[t]!=INT_MAX){
  	  return dist[t];
  }
  else
      return -1;
}

int main() {
  int n, m;
  cin >> n >> m;
  vector<vector<int> > adj(n, vector<int>());
  int *cost[n];
  for(int i=0;i<n;i++){
  	cost[i] = (int *)malloc(n * sizeof(int));
  }
  for (int i = 0; i < m; i++) {
    int x, y, w;
    std::cin >> x >> y >> w;
    adj[x - 1].push_back(y - 1);
    cost[x-1][y-1] = w;
  }

  int s, t;
  cin >> s >> t;
  s--, t--;
  std::cout << distance(adj, cost, s, t, n);
}
