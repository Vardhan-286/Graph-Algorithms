#include <iostream>
#include <vector>
#include <climits>
#include <iterator>
using namespace std;

int negative_cycle(vector<vector<int> > &adj, int *cost[], int vertex, int s, vector<bool> &visited) {
  
  visited[s]=true;
  int dist[vertex];
  int prev[vertex];
  for(int i=0;i<vertex;i++){
    dist[i] = INT_MAX;
    prev[i] = -1;
  }
  dist[s] = 0;
  for(int i=0;i<vertex-1;i++){
      for(int j=0;j<vertex;j++){
        for(vector<int>::iterator it=adj[j].begin();it!=adj[j].end();it++){
        	visited[*it]=true;
          if(dist[j]!=INT_MAX && dist[*it]>dist[j]+cost[j][*it]){
            dist[*it] = dist[j]+cost[j][*it];
            prev[*it] = j;
          }
        }
      }
  }
  for(int j=0;j<vertex;j++){
  	for(vector<int>::iterator it=adj[j].begin();it!=adj[j].end();it++){
        if(dist[j]!=INT_MAX && dist[*it]>dist[j]+cost[j][*it]){
           return 1;
        }
    }
  }
  return 0;
}

int main() {
  int n, m;
  std::cin >> n >> m;
  vector<vector<int> > adj(n, vector<int>());
  int *cost[n];
  for(int i=0;i<n;i++){
    cost[i] = (int *)malloc(n*sizeof(int));
  }
  for (int i = 0; i < m; i++) {
    int x, y, w;
    std::cin >> x >> y >> w;
    adj[x - 1].push_back(y - 1);
    cost[x-1][y-1] = w;
  }
  bool flag=false;
  vector<bool> visited(n,false);
  for(int i=0;i<n;i++){
  	if(!visited[i]){
  		if(negative_cycle(adj,cost,n,i,visited))
  		    flag=true;
  	}
  }
  if(flag)
  	cout<<1;
  else
  	cout<<0;
}
